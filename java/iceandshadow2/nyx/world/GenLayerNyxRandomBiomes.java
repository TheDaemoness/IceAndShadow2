package iceandshadow2.nyx.world;

import iceandshadow2.ias.util.IaSWorldHelper;
import net.minecraft.world.biome.BiomeGenBase;
import net.minecraft.world.gen.layer.GenLayer;
import net.minecraft.world.gen.layer.IntCache;

public class GenLayerNyxRandomBiomes extends GenLayer {
	/** This sets all the biomes that are allowed to appear in a dimension */
	private final BiomeGenBase[] allowedBiomes;

	public GenLayerNyxRandomBiomes(BiomeGenBase[] biomes, long par1) {
		super(par1);
		allowedBiomes = biomes;
	}

	/**
	 * Returns a list of integer values generated by this layer. These may be
	 * interpreted as temperatures, rainfall amounts, or biomeList[] indices
	 * based on the particular GenLayer subclass.
	 */
	@Override
	public int[] getInts(int x, int z, int xlim, int zlim) {
		final int[] var6 = IntCache.getIntCache(xlim*zlim);
		final int rl = IaSWorldHelper.getRegionLevel(null, x * 16, -1, z * 16);
		for (int zit = 0; zit < zlim; ++zit)
			for (int xit = 0; xit < xlim; ++xit) {
				initChunkSeed(x+xit, z+zit);
				int nb = nextInt(allowedBiomes.length);
				if (allowedBiomes[nb] == NyxBiomes.nyxInfested) {
					switch(rl) {
					case 0:
						nb = NyxBiomes.nyxHillForest.biomeID; break;
					case 1:
					case 2:
						nb = NyxBiomes.nyxMesaForest.biomeID; break;
					default:
						nb = allowedBiomes[nb].biomeID; break;
					}
				} else if (allowedBiomes[nb] == NyxBiomes.nyxRugged) {
					switch(rl) {
					case 0:
					case 1:
						nb = NyxBiomes.nyxHills.biomeID; break;
					case 2:
						nb = NyxBiomes.nyxHighMountains.biomeID; break;
					case 3:
					case 4:
						nb = NyxBiomes.nyxMesas.biomeID; break;
					default:
						nb = allowedBiomes[nb].biomeID;
					}
				} else if (allowedBiomes[nb] == NyxBiomes.nyxHighMountains && rl <= 0) {
					nb = NyxBiomes.nyxLowMountains.biomeID;
				} else
					nb = allowedBiomes[nb].biomeID;
				var6[xit + zit * xlim] = nb;
			}

		return var6;
	}
}
